using Microsoft.CodeAnalysis;
using System.Text;
using UniTyped.Generator.AnimatorViews;
using UniTyped.Generator.MaterialViews;
using UniTyped.Generator.ProjectReflections;
using UniTyped.Generator.SerializationViews;

namespace UniTyped.Generator
{
    public static partial class UniTypedGenerator
    {
        public static string? Execute(Compilation compilation, IUniTypedCollector collector)
        {
            var assembly = compilation.AssemblyName;
            if (assembly == null) return null;

            bool isUniTypedAssembly = compilation.AssemblyName == "UniTyped";

            //ignore assemblies which aren't referencing UniTyped runtime assembly.
            if (!isUniTypedAssembly && compilation.ReferencedAssemblyNames.All(a => a.Name != "UniTyped")) return null;

            var sourceBuilder = new StringBuilder();
            sourceBuilder.AppendLine($"// <auto-generated />");
            sourceBuilder.AppendLine($"// Assembly {assembly} {DateTime.Now}");
            sourceBuilder.AppendLine("class UniTypedGeneratedTracker {}");

            UniTypedGeneratorContext? context = null;
            try
            {
                context = new UniTypedGeneratorContext(compilation, collector);

                if (isUniTypedAssembly)
                {
                    ProjectReflectionGenerator.GenerateViews(context, sourceBuilder);
                }
                else
                {   
                    sourceBuilder.AppendLine("#if UNITY_EDITOR");
                    TypedViewGenerator.GenerateViews(context, sourceBuilder);
                    sourceBuilder.AppendLine("#endif");

                    MaterialViewGenerator.GenerateViews(context, sourceBuilder);

                    AnimatorViewGenerator.GenerateViews(context, sourceBuilder);
                }
            }
            catch (Exception e)
            {
                sourceBuilder.AppendLine();
                sourceBuilder.AppendLine("/*");
                sourceBuilder.AppendLine($"{e.GetType().Name}: {e.Message}");
                sourceBuilder.AppendLine(e.StackTrace);
                sourceBuilder.AppendLine("*/");
                sourceBuilder.AppendLine();
            }

            return sourceBuilder.ToString();
        }
    }
}